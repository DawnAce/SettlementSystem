@{
    ViewData["Title"] = "Calculate Page";
}
<!-- add the shim first -->
<script type="text/javascript" src="https://unpkg.com/xlsx/dist/shim.min.js"></script>
<!-- after the shim is referenced, add the library -->
<script type="text/javascript" src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
<script type="text/javascript" src="https://unpkg.com/file-saver@1.3.3/FileSaver.js"></script>

<div id="app">
    <template>
        <span>医院：</span>
        <el-select v-model="hospitalValues" 
                   multiple
                   value-key="value" 
                   placeholder="请选择医院">
            <el-option v-for="item in hospitalOptions"
                       :key="item.value"
                       :label="item.label"
                       :value="item">
                {{item.label}}
            </el-option>
        </el-select>

        <span style="margin-left: 5px;">预约渠道：</span>
        <el-select v-model="channelValues"
                   multiple
                   placeholder="请选择渠道">
            <el-option v-for="item in channelOptions"
                       :key="item.value"
                       :label="item.label"
                       :value="item">
                {{item.label}}
            </el-option>
        </el-select>
        <el-button type="primary" v-on:click="initTable()">计算</el-button>

        <el-button type="primary" v-on:click="exportTable()" style="float: right">导出表格</el-button>

        <el-table id="hospitalTable"
                  ref="hospitalTable"
                  :data="tableData"
                  border
                  :summary-method="getSummaries"
                  show-summary
                  lazy
                  row-key="id"
                  :load="load"
                  :tree-props="{children: 'children', hasChildren: 'hasChildren'}"
                  style="margin-top: 10px;width: 100%">
            <el-table-column property="mc"
                             label="医院名称"
                             sortable
                             width="200">
            </el-table-column>
            <el-table-column prop="wjzl"
                             sortable
                             label="未就诊量">
            </el-table-column>
            <el-table-column prop="qxl"
                             sortable
                             label="取消量">
            </el-table-column>
            <el-table-column prop="jzl"
                             sortable
                             label="就诊量">
            </el-table-column>
            <el-table-column prop="yyzl"
                             sortable
                             label="预约总量">
            </el-table-column>
            <el-table-column prop="qd"
                             label="渠道">
            </el-table-column>
            <el-table-column prop="bz"
                             label="备注">
            </el-table-column>
            <el-table-column prop="ze"
                             sortable
                             label="总额">
            </el-table-column>
        </el-table>
    </template>
</div>
<script>
    var hospitalOptions = [{
        value: "002",
        label: "长峰医院"
    }]

    var channelOptions = [{
        value: "114",
        label: "114"
    },{
        value: "ky",
        label: "快医"
    }]

    var nodeCount = 1   // only to identify different tree node
    var Main = {
        data() {
            return {
                tableData: [],
                hospitalOptions: hospitalOptions,
                channelOptions: channelOptions,
                hospitalValues: hospitalOptions,
                channelValues: channelOptions
            }
        },
        created() {
            this.initTable();
        },
        methods: {
            initTable() {
                var hospital = this.hospitalValues
                if (hospital.length == 0) {
                    this.$message.error('必须选择至少一所医院！')
                    return
                }
                var qd = this.channelValues
                if (qd.length == 0) {
                    this.$message.error('你没选渠道怎么算！')
                    return
                }
                var hospitalIds = hospital.map(item => item.value)
                var qdIds = qd.map(item => item.value)
                var url = "https://@Context.Request.Host" + "/api/MyApi/CalculateHospital/" + hospitalIds + "?qd=" + qdIds;

                const req = new Request(url, { method: "GET" })

                var holder = this
                fetch(req).then(function (response) {
                    response.json().then(function (data) {
                        data.forEach((item, index) => {
                            item.hasChildren = true
                            item.level = 1
                            item.qd = holder.convertQdCode(item.qd)
                            item.children = []
                        })

                        // 因为如果已经有了展开项，那么只会变第一层的树节点（增加的展开节点还在），所以需要先清空table，然后调用nextTick方法，在清空表格后，再更新为最新数据
                        holder.tableData = []   
                        holder.$nextTick(function () {
                            holder.tableData = data
                        })
                    });
                }).catch(function (error) {
                    alert(error)
                })
            },
            getSummaries(param) {
                const { columns, data } = param;
                const sums = [];
                columns.forEach((column, index) => {
                    if (index === 0) {
                        sums[index] = '总收入';
                        return;
                    } else if (column.property == 'bz') {
                        sums[index] = "N/A"
                        return;
                    }
                    const values = data.map(item => Number(item[column.property]));
                    if (!values.every(value => isNaN(value))) {
                        sums[index] = values.reduce((prev, curr) => {
                            const value = Number(curr);
                            if (!isNaN(value)) {
                                return prev + curr;
                            } else {
                                return prev;
                            }
                        }, 0);
                        //sums[index] += ' 元';
                    }
                });

                return sums;
            },
            load(tree, treeNode, resolve) {
                // 当qd字段有值时，说明已经到叶节点，不能再展开了
                if (tree.qd != null && tree.qd != "") {
                    resolve([])
                    return
                }
                var holder = this
                var fqd = tree.level > 1   //从第三层起才分渠道，即当前为第二层节点

                // 只需要医院id或者科室id的集合
                this.getDetailProcess(tree.id.split(";")[0], function (data) {
                        var newData = holder.formatData(data, fqd)
                    newData.forEach((item, index) => {
                        item.id += ";" + holder.formatNumber(nodeCount++)
                        item.level = tree.level + 1
                        item.qd = holder.convertQdCode(item.qd)
                    })
                    resolve(newData)
                })
            },
            // 按照科室渠道进行计算
            getDetailProcess(id, callback) {
                var qd = this.channelValues.map(item => item.value)
                var url = "https://@Context.Request.Host" + "/api/MyApi/CalculateDepartment/" + id + "?qd=" + qd;
                const req = new Request(url, { method: "GET" })

                fetch(req).then(function (response) {
                    response.json().then(function (value) {
                        callback(value)
                    });
                }).catch(function (error) {
                    alert(error)
                })
            },
            formatNumber(num) {
                return "000".substring(0,3-num.toString().length)+num
            },
            // 合并显示数据
            formatData(data, fqd) {
                var m = new Map();
                data.forEach((item, index) => {
                    var key = item.mc + ";" + item.xsjh
                    if (fqd)
                        key += ";" + item.qd
                    if (m.has(key)) {
                        var row = m.get(key)
                        if (!row.idSet.has(item.id)) {
                            row.id += "," + item.id
                            row.idSet.add(item.id)
                            row.ks += "、" + item.ks
                        }

                        row.wjzl += item.wjzl
                        row.qxl += item.qxl
                        row.jzl += item.jzl
                        row.yyzl += item.yyzl
                        row.ze += item.ze
                    } else {
                        item.idSet = new Set([item.id])
                        m.set(key, Object.assign({}, item))
                    }
                })

                var tempData = new Array()
                m.forEach(function (value, key, map) {
                    delete value.idSet
                    value.mc = value.ks     // 需要显示科室的名称集合
                    value.hasChildren = !fqd    //如果要分渠道，说明已经到了叶子节点了
                    if(!fqd) value.qd = ""   //不分渠道的话，所展示的为所选的渠道，所以不用显示
                    tempData.push(value)
                })
                return tempData
            },
            convertQdCode(qdCode) {
                if (qdCode == 'ky')
                    return "快医"
                return qdCode
            },
            exportTable(){
                /* generate workbook object from table */
                var wb = XLSX.utils.table_to_book(document.querySelector('#hospitalTable'), { raw: true })
                /* get binary string as output */
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'array' })
                try {
                     saveAs(new Blob([wbout], { type: 'application/octet-stream' }), 'sheetjs.xlsx')
                } catch (e) {
                    if (typeof console !== 'undefined') console.log(e, wbout)
                }
                return wbout
            }
        }
    }
    var Ctor = Vue.extend(Main)
    new Ctor().$mount('#app')
</script>
