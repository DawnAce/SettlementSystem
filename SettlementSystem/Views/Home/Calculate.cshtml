@{
    ViewData["Title"] = "Calculate Page";
}

<div id="app">
    <template>
        <span>医院：</span><el-select v-model="hospitalValues" placeholder="请选择医院">
            <el-option v-for="item in hospitalOptions"
                       :key="item.value"
                       :label="item.label"
                       :value="item.value">
            </el-option>
        </el-select>

        <span style="margin-left: 20px;">预约渠道：</span><el-select v-model="channelValues"
                   collapse-tags
                   placeholder="请选择渠道">
            <el-option v-for="item in channelOptions"
                       :key="item.value"
                       :label="item.label"
                       :value="item.value">
            </el-option>
        </el-select>

        <el-table ref="hospitalTable"
                  :data="tableData"
                  border
                  :summary-method="getSummaries"
                  show-summary
                  lazy
                  row-key="id"
                  :load="load"
                  :tree-props="{children: 'children', hasChildren: 'hasChildren'}"
                  style="margin-top: 10px;width: 100%">
            <el-table-column property="mc"
                             label="医院名称"
                             sortable
                             width="200">
            </el-table-column>
            <el-table-column prop="wjzl"
                             sortable
                             label="未就诊量">
            </el-table-column>
            <el-table-column prop="qxl"
                             sortable
                             label="取消量">
            </el-table-column>
            <el-table-column prop="jzl"
                             sortable
                             label="就诊量">
            </el-table-column>
            <el-table-column prop="yyzl"
                             sortable
                             label="预约总量">
            </el-table-column>
            <el-table-column prop="bz"
                             label="备注">
            </el-table-column>
            <el-table-column prop="ze"
                             sortable
                             label="总额">
            </el-table-column>
            <el-table-column label="渠道详情">
            </el-table-column>
        </el-table>
    </template>
</div>
<script>
    var tableData = [
        {
            id: "002",
            mc: '北京长峰医院',
            wjzl: 58,
            qxl: 108,
            jzl: 82,
            yyzl: 248,
            qd: "所有",
            bz: "",
            ze: 13860,
            hasChildren: true
        }
    ]

    var cfData = [{
            id: "002001",
            mc: '血管外科',
            wjzl: 7,
            qxl: 13,
            jzl: 9,
            yyzl: 29,
            qd: "所有",
            bz: ""
        }, {
            id: "002002",
            mc: '血管瘤',
            wjzl: 7,
            qxl: 13,
            jzl: 9,
            yyzl: 29,
            qd: "所有",
            bz: ""
        }, {
            id: "002003",
            mc: '男科',
            wjzl: 9,
            qxl: 10,
            jzl: 20,
            yyzl: 39,
            qd: "所有",
            bz: ""
        }, {
            id: "002004",
            mc: '泌尿',
            wjzl: 9,
            qxl: 10,
            jzl: 20,
            yyzl: 39,
            qd: "所有",
            bz: ""
        }, {
            id: "002005",
            mc: '妇科',
            wjzl: 9,
            qxl: 10,
            jzl: 20,
            yyzl: 39,
            qd: "所有",
            bz: ""
        }, {
            id: "002006",
            mc: '内分泌',
            wjzl: 42,
            qxl: 85,
            jzl: 53,
            yyzl: 180,
            qd: "所有",
            bz: ""
        }, {
            id: "002007",
            mc: '糖尿',
            wjzl: 42,
            qxl: 85,
            jzl: 53,
            yyzl: 180,
            qd: "所有",
            bz: ""
        }, {
            id: "002008",
            mc: '甲状腺',
            wjzl: 42,
            qxl: 85,
            jzl: 53,
            yyzl: 180,
            qd: "所有",
            bz: ""
        }, {
            id: "002009",
            mc: '心血管',
            wjzl: 42,
            qxl: 85,
            jzl: 53,
            yyzl: 180,
            qd: "所有",
            bz: ""
        }, {
            id: "002010",
            mc: '神内',
            wjzl: 42,
            qxl: 85,
            jzl: 53,
            yyzl: 180,
            qd: "所有",
            bz: ""
        }, {
            id: "002011",
            mc: '中医',
            wjzl: 42,
            qxl: 85,
            jzl: 53,
            yyzl: 180,
            qd: "所有",
            bz: ""
        }
    ]

    var hospitalOptions = [{
        value: "all",
        label: "全部"
    },{
        value: "002",
        label: "长峰医院"
    }]

    var channelOptions = [{
        value: "all",
        label: "全部"
    },{
        value: "114",
        label: "114"
    },{
        value: "ky",
        label: "快医"
    }]

    var nodeCount = 1   // only to identify different tree node
    var Main = {
        data() {
            return {
                tableData: tableData,
                hospitalOptions: hospitalOptions,
                channelOptions: channelOptions,
                hospitalValues: "全部",
                channelValues: "全部"
            }
        },
        methods: {
            getSummaries(param) {
                const { columns, data } = param;
                const sums = [];
                columns.forEach((column, index) => {
                    if (index === 0) {
                        sums[index] = '总收入';
                        return;
                    } else if (column.property == 'bz') {
                        sums[index] = "N/A"
                        return;
                    }
                    const values = data.map(item => Number(item[column.property]));
                    if (!values.every(value => isNaN(value))) {
                        sums[index] = values.reduce((prev, curr) => {
                            const value = Number(curr);
                            if (!isNaN(value)) {
                                return prev + curr;
                            } else {
                                return prev;
                            }
                        }, 0);
                        //sums[index] += ' 元';
                    }
                });

                return sums;
            },
            load(tree, treeNode, resolve) {
                var formatDataFun = this.formatData
                var formatNumberFun = this.formatNumber
                // id中不包含";"表示为最上层医院，此时是不需要区分渠道的
                if (tree.id.indexOf(";") == -1) {
                    this.getDetailProcess(tree.id, function (data) {
                        var newData = formatDataFun(data, false)
                        newData.forEach((item, index) => item.id += ";" + formatNumberFun(nodeCount++))
                        resolve(newData);
                    })
                } else {  //因为有合并，所以为了避免与真正的科室ID重复，需要加上递增后缀
                    this.getDetailProcess(tree.id, function (data) {
                        var newData = formatDataFun(data, true)
                        newData.forEach((item, index) => item.id += ";" + formatNumberFun(nodeCount++))
                        resolve(newData);
                    })
                }
                resolve([]);
            },
            // 按照科室渠道进行计算 
            getDetailProcess(id, callback) {
                // fqd为true，表示要分渠道进行展示
                var url = "https://@Context.Request.Host" + "/api/MyApi/Calculate/" + id
                const req = new Request(url, { method: "GET" })

                fetch(req).then(function (response) {
                    response.json().then(function (value) {
                        callback(value)
                    });
                }).catch(function (error) {
                    alert(error)
                })
            },
            formatNumber(num) {
                return "000".substring(0,3-num.toString().length)+num
            },
            // 合并显示数据
            formatData(data, fqd) {
                var m = new Map();
                data.forEach((item, index) => {
                    var key = item.mc + ";" + item.xsjh
                    if (fqd)
                        key += ";" + item.qd
                    if (m.has(key)) {
                        var row = m.get(key)
                        if (!row.idSet.has(item.id)) {
                            row.id += "," + item.id
                            row.idSet.add(item.id)
                            row.ks += "、" + item.ks
                        }

                        row.wjzl += item.wjzl
                        row.qxl += item.qxl
                        row.jzl += item.jzl
                        row.yyzl += item.yyzl
                        row.ze += item.ze
                    } else {
                        item.idSet = new Set([item.id])
                        m.set(key, Object.assign({}, item))
                    }
                })

                var tempData = new Array()
                m.forEach(function (value, key, map) {
                    delete value.idSet
                    if (!fqd)
                        value.qd = "所有"
                    value.mc = value.ks     // 需要显示科室的名称集合
                    value.hasChildren = !fqd    //如果分渠道展示，说明子节点已经为叶子节点
                    tempData.push(value)
                })
                return tempData
            }
        }
    }
    var Ctor = Vue.extend(Main)
    new Ctor().$mount('#app')
</script>
