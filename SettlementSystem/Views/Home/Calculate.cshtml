@{
    ViewData["Title"] = "Calculate Page";
}
<!-- add the shim first -->
<script type="text/javascript" src="https://unpkg.com/xlsx/dist/shim.min.js"></script>
<!-- after the shim is referenced, add the library -->
<script type="text/javascript" src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
<script type="text/javascript" src="https://unpkg.com/file-saver@1.3.3/FileSaver.js"></script>

<div id="app">
    <template>
        <span>科室：</span>
        <el-cascader ref="hospitalSelection"
                     :options="hospitalOptions"
                     :props="{ multiple: true }"
                     placeholder="请选择医院"
                     expand-trigger="hover"
                     collapse-tags
                     v-model="hospitalDefault">
        </el-cascader>
        <span style="margin-left:10px">渠道：</span>
        <el-cascader ref="typeSelection"
                     :options="typeOptions"
                     :props="{ multiple: true }"
                     placeholder="请选择渠道"
                     collapse-tags
                     v-model="typeDefault">
        </el-cascader>
        <span style="margin-left:10px">月份：</span>
        <el-cascader ref="dateSelection"
                     :options="dateOptions"
                     :props="{ multiple: true }"
                     placeholder="请选择日期"
                     collapse-tags
                     v-model="dateDefault">
        </el-cascader>
        <el-button type="primary" v-on:click="exportTable()" style="float: right;">导出表格</el-button>
        <el-button type="primary" v-on:click="calculate()" style="float: right; margin-right:10px;">计算</el-button>

        <el-table id="hospitalTable"
                  ref="hospitalTable"
                  :data="tableData"
                  border
                  :summary-method="getSummaries"
                  show-summary
                  row-key="id"
                  :tree-props="{children: 'children', hasChildren: 'hasChildren'}"
                  style="margin-top: 10px;width: 100%">
            <el-table-column property="zymc"
                             label="总院名称"
                             fixed
                             sortable
                             width="200">
            </el-table-column>
            <el-table-column property="fymc"
                             label="分院名称"
                             fixed
                             sortable
                             width="200">
            </el-table-column>
            <el-table-column property="ks"
                             label="科室名称"
                             fixed
                             sortable
                             width="200">
            </el-table-column>
            <el-table-column prop="wjzl"
                             sortable
                             label="未就诊量">
            </el-table-column>
            <el-table-column prop="qxl"
                             sortable
                             label="取消量">
            </el-table-column>
            <el-table-column prop="jzl"
                             sortable
                             label="就诊量">
            </el-table-column>
            <el-table-column prop="yyzl"
                             sortable
                             label="预约总量">
            </el-table-column>
            <el-table-column prop="qd"
                             label="渠道">
            </el-table-column>
            <el-table-column prop="ze"
                             sortable
                             fixed="right"
                             label="总额">
            </el-table-column>
        </el-table>
    </template>
</div>
<script>
    var hospitalOptions = [{
        value: "002",
        label: "长峰医院"
    }]

    var typeOptions = [{
        value: "114",
        label: "114"
    },{
        value: "快医",
        label: "快医"
    }]
    var typeDefalut = ["114", "快医"]

    var nodeCount = 1   // only to identify different tree node
    var Main = {
        data() {
            return {
                tableData: [],
                dateOptions: [],
                dateDefault: [],
                hospitalOptions: [],
                hospitalDefault: [],
                typeOptions: typeOptions,
                typeDefault: typeDefalut,
                needInitCount: 2
            }
        },
        created() {
            this.initDateOptions()
            this.initHospitalOptions()
        },
        watch: {
            needInitCount(val, oldVal) {
                 if (val == 0)
                    this.calculate()
            }
        },
        methods: {
            initDateOptions() {
                var year = new Date().getFullYear()
                var month = new Date().getMonth()
                if (month < 10) month = "0" + month

                var url = "https://@Context.Request.Host" + "/api/MyApi/GetDateChoices?year=" + year;

                var holder = this
                const req = new Request(url, { method: "GET" })
                fetch(req).then(function (response) {
                    response.json().then(function (data) {
                        if (data.code == "200") {
                            data.data.forEach((item, index) => {
                                holder.dateOptions.push({"value": item.result.replace("-",""), "label":item.result})
                            })
                           holder.dateDefault.push(year + "" + month)
                        } else {
                            this.$message.erro(data.msg)
                        }
                        holder.$nextTick(function () {
                            --holder.needInitCount;
                        });
                    })
                });
            },
            initHospitalOptions() {
                var url = "https://@Context.Request.Host" + "/api/MyApi/GetHospitalTree"

                var holder = this
                const req = new Request(url, { method: "GET" })
                fetch(req).then(function (response) {
                    response.json().then(function (data) {
                        if (data.code == "200") {
                            var root = { "value": "0", "label": "全部" }
                            root["children"] = data.data.children
                            holder.hospitalOptions = [root]
                            data.data.default.forEach((item, index) => {
                                holder.hospitalDefault.push(['0', ...item])
                            })
                        } else {
                            this.$message.error(data.msg)
                        }
                        holder.$nextTick(function () {
                            --holder.needInitCount;
                        });
                    })
                });
            },
            calculate() {
                var hospitalIds = []
                this.$refs.hospitalSelection.getCheckedNodes(true)
                    .forEach((node, index) => {
                        hospitalIds.push(node.data.value)
                    });
                var types = []
                this.$refs.typeSelection.getCheckedNodes(true)
                    .forEach((node, index) => {
                        types.push(node.data.value)
                    })

                var dateIds = []
                this.$refs.dateSelection.getCheckedNodes(true)
                    .forEach((node, index) => {
                        dateIds.push(node.data.value)
                    })

                var url = "https://@Context.Request.Host" + "/api/MyApi/Calculate"
                const req = new Request(url, {
                    method: "POST",
                    headers: {
                      'content-type': 'application/json'
                    },
                    body: JSON.stringify({
                        "ksIds": hospitalIds,
                        "feetypes": types,
                        "dates": dateIds
                    })
                })

                var holder = this
                fetch(req).then(function (response) {
                    response.json().then(function (data) {
                        if (data.code == "200") {
                            holder.tableData = data.data
                        } else {
                            this.$message.error(data.msg)
                        }
                    });
                }).catch(function (error) {
                    holder.$message.error(error)
                })
            },
            getSummaries(param) {
                const { columns, data } = param;
                const sums = [];
                columns.forEach((column, index) => {
                    if (index === 0) {
                        sums[index] = '总计';
                        return;
                    } else if (column.property=='bz' || column.property=='fymc' || column.property=='ks') {
                        sums[index] = "N/A"
                        return;
                    }
                    const values = data.map(item => Number(item[column.property]));
                    if (!values.every(value => isNaN(value))) {
                        sums[index] = values.reduce((prev, curr) => {
                            const value = Number(curr);
                            if (!isNaN(value)) {
                                return prev + curr;
                            } else {
                                return prev;
                            }
                        }, 0);
                        //sums[index] += ' 元';
                    }
                });

                return sums;
            },
            exportTable() {
                /* generate workbook object from table */
                var wb = XLSX.utils.table_to_book(document.querySelector('#hospitalTable'), { raw: true })
                /* get binary string as output */
                var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'array' })
                try {
                     saveAs(new Blob([wbout], { type: 'application/octet-stream' }), 'sheetjs.xlsx')
                } catch (e) {
                    if (typeof console !== 'undefined') console.log(e, wbout)
                }
                return wbout
            }
        }
    }
    var Ctor = Vue.extend(Main)
    new Ctor().$mount('#app')
</script>
